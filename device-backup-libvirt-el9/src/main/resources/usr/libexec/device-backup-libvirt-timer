#!/bin/bash -x

#
# Backup Libvirt Timers
# ======================
#
# This script autogenerates the backup libvirt config.

set -e
umask 0027

exec 2> >(logger -t ${0})

#
# Handle the cleanup
# ------------------
cleanup_before_exit () {
  if [ -d "${tmpdir}" ]; then
    rm -rf "${tmpdir}"
  fi
}
# be in a temporay workspace (this works on linux and macosx)
tmpdir=`mktemp -d 2>/dev/null || mktemp -d -t 'tmpdir'`
# trap catches the exit signal and runs the specified function
trap cleanup_before_exit EXIT
# be in our directory
cd "${tmpdir}"


run_backup() {

request="${1}"
instance="${2}"

#
# Run backup

if test "${request}" == "start" -o "${request}" == "reload" -o "${request}" == "restart"; then

  logger -t backup-libvirt@${instance} "${request}ing backup libvirt..."

  install -m 700 -d /run/backup-libvirt

  line="/etc/device/timers/backup/libvirt/${instance}"

  if test -f "$line/host.d/hostname.txt"; then
    fqdn="$(head -n 1 $line/host.d/hostname.txt)"
  else
    logger -t backup-libvirt@${instance} "no hostname: backup libvirt skipped."
    exit 1
  fi

  if test -f "$line/host.d/port.txt"; then
    port="$(head -n 1 $line/host.d/port.txt)"
  else
    port="22"
  fi

  if test -f "$line/host.d/remote-owner.txt"; then
    remoteowner="$(head -n 1 $line/host.d/remote-owner.txt)"
  else
    logger -t backup-libvirt@${instance} "no remote owner: backup libvirt skipped."
    exit 1
  fi

  if test -f "$line/local-owner.txt"; then
    localowner="$(head -n 1 $line/local-owner.txt)"
    base="$(getent passwd ${localowner} | cut -d ":" -f6)"
    localgroup="$(id -gn ${localowner})"
  else
    logger -t backup-libvirt@${instance} "no local owner: backup libvirt skipped."
    exit 1
  fi

  source=/
  target=disk

  if test -f "$line/frequency.txt"; then
    frequency="$(head -n 1 $line/frequency.txt)"
  else
    logger -t backup-libvirt@${instance} "no frequency: backup libvirt skipped."
    exit 1
  fi

  if test -f "$line/host.d/retain.txt"; then
    retain="$(head -n 1 $line/host.d/retain.txt)"
  else
    retain="7"
  fi

  if test -f "$line/host.d/ssh-proxy.txt"; then
    sshproxy="-A -J $(head -n 1 $line/host.d/ssh-proxy.txt)"
  else
    sshproxy=""
  fi

  if test -f "$line/backup-files.bin"; then
    backupfiles="true"
  else
    backupfiles=""
  fi

  # prepare the initial path if it does not exist
  /usr/sbin/runuser -u "${localowner}" -- mkdir -p "${base}/${fqdn}"
  /usr/sbin/runuser -u "${localowner}" -- mkdir -p "${base}/${fqdn}/libvirt"
  /usr/sbin/runuser -u "${localowner}" -- mkdir -p "${base}/${fqdn}/libvirt/latest"
  /usr/sbin/runuser -u "${localowner}" -- mkdir -p "${base}/${fqdn}/libvirt/.progress"
  /usr/sbin/runuser -u "${localowner}" -- mkdir -p "${base}/${fqdn}/libvirt/.progress/${target}"

  if test -e "${base}/${fqdn}/libvirt/latest"; then
    created=$(stat --printf="%W" "${base}/${fqdn}/libvirt/latest")
    archive=${base}/${fqdn}/libvirt/$(date --date=@"${created}" "+%Y-%m-%d")/
  fi

  # set up ssh agent
  SSHAGENT="/usr/sbin/runuser -u ${localowner} -- /usr/bin/ssh-agent"
  SSHADD="/usr/sbin/runuser -m -u ${localowner} -- /usr/bin/ssh-add"
  eval `${SSHAGENT} -s`
  function cleanup {
    /bin/kill $SSH_AGENT_PID
  }
  trap cleanup EXIT
  ${SSHADD}

  # set up rsync
  CP="/usr/sbin/runuser -m -u ${localowner} -- /usr/bin/cp --update --one-file-system --strip-trailing-slashes --reflink=always"
  SSH="/usr/sbin/runuser -m -u ${localowner} -- /usr/bin/ssh ${sshproxy} -p ${port}"
  RSYNC="/usr/sbin/runuser -m -u ${localowner} -- /usr/bin/rsync"
  OPTIONS="-avz --no-specials --progress --delete-before --one-file-system --links --fake-super --chmod=D2750,F640"
  FIRST="--sparse --whole-file --partial --block-size=131072"
  NEXT="--inplace --partial --block-size=131072"
  RESUME="--append-verify --sparse --block-size=131072"

  # existing transfer in progress, previously interrupted?
  if test -e "${base}/${fqdn}/libvirt/.progress/${target}"; then

    logger -t backup-libvirt@${instance} "Resume transfer: ${RSYNC} -e \"/usr/bin/ssh ${sshproxy} -p ${port}\" ${OPTIONS} ${RESUME} ${remoteowner}@${fqdn}:${source}/ ${base}/${fqdn}/libvirt/.progress/${target}/"

    # existing transfer in progress - continue sync in place
    if test -n "${backupfiles}"; then
      ${RSYNC} -e "/usr/bin/ssh ${sshproxy} -p ${port}" ${OPTIONS} ${RESUME} ${remoteowner}@${fqdn}:${source} ${base}/${fqdn}/libvirt/.progress/${target}
    fi

  # existing data, but new transfer starting?
  elif test -e "${base}/${fqdn}/libvirt/latest/${target}" -a ! -e "${base}/${fqdn}/libvirt/.progress/${target}"; then

    logger -t backup-libvirt@${instance} "Update transfer: ${RSYNC} -e \"/usr/bin/ssh ${sshproxy} -p ${port}\" ${OPTIONS} ${NEXT} ${remoteowner}@${fqdn}:${source} ${base}/${fqdn}/libvirt/.progress/${target}"

    # existing data - make a copy and then sync in place
    ${CP} -a "${base}/${fqdn}/libvirt/latest/${target}" "${base}/${fqdn}/libvirt/.progress/"
    if test -n "${backupfiles}"; then
      ${RSYNC} -e "/usr/bin/ssh ${sshproxy} -p ${port}" ${OPTIONS} ${NEXT} ${remoteowner}@${fqdn}:${source} ${base}/${fqdn}/libvirt/.progress/${target}
    fi

  # no existing data, no transfer in progress, copy sparse from scratch
  else

    logger -t backup-libvirt@${instance} "Inital transfer: ${RSYNC} -e \"/usr/bin/ssh ${sshproxy} -p ${port}\" ${OPTIONS} ${FIRST} ${remoteowner}@${fqdn}:${source} ${base}/${fqdn}/libvirt/.progress/${target}"

    # first time copy - user whole file
    if test -n "${backupfiles}"; then
      ${RSYNC} -e "/usr/bin/ssh ${sshproxy} -p ${port}" ${OPTIONS} ${FIRST} ${remoteowner}@${fqdn}:${source} ${base}/${fqdn}/libvirt/.progress/${target}
    fi

  fi

  # make sure we stay sparse
  find "${base}/${fqdn}/libvirt/.progress/${target}" -type f -print0 | xargs --no-run-if-empty --null -L1 fallocate -d

  # get definitions of each vm
  mapfile -t guests < <(${SSH} "${remoteowner}@${fqdn}" virsh list --all --name)
  for guest in "${guests[@]}"; do

    if test -n "${guest}"; then
      install -o "${localowner}" -g "${localowner}" -d "${base}/${fqdn}/libvirt/"
      ${SSH} "${remoteowner}@${fqdn}" virsh dumpxml "${guest}" | install -o "${localowner}" -g "${localgroup}" /dev/stdin "${base}/${fqdn}/libvirt/.progress/${guest}.xml"
    fi

  done

  # save history? only do this once per period
  if test -z "${archive}" -o -d "${archive}"; then
    # no history for now
    mv "${base}/${fqdn}/libvirt/latest" ${base}/${fqdn}/libvirt/remove
    mv "${base}/${fqdn}/libvirt/.progress" "${base}/${fqdn}/libvirt/latest"
    rm -rf "${base}/${fqdn}/libvirt/remove"
  else
    mv "${base}/${fqdn}/libvirt/latest" "${archive}"
    mv "${base}/${fqdn}/libvirt/.progress" "${base}/${fqdn}/libvirt/latest"
  fi

  # clean up the archive
  find "${base}/${fqdn}/libvirt/" -mindepth 1 -maxdepth 1 -type d -name "*-*-*" | sort -r | tail -n +$((${retain}+1)) | xargs -L1 rm -rf

  logger -t backup-libvirt@${instance} "${request}ed backup libvirt."

elif test "${request}" == "stop"; then

  logger -t backup-libvirt@${instance} "stopped backup libvirt."

fi



}

#
# What to do?
# -----------

request="${1}"
instance="${2}"

if test -n "${instance}"; then
  run_backup "${1}" "${2}"
  exit 0
fi



#
# Add/remove backup

find /etc/device/timers/backup/libvirt/ -mindepth 1 -maxdepth 1 -type l | \
while read line; do

  target=$(readlink -f "$line")

  if test ! -f "$line/name.txt"; then
    continue;
  fi
  instance="$(head $line/name.txt)"
  uuid=$(basename $target)

  if test ! -f "$line/frequency.txt"; then
    continue;
  fi
  frequency="$(head $line/frequency.txt)"

  # remove old instances
  if test -f "$line/removed"; then

    logger -t backup-libvirt-timer "removing backup libvirt ${instance} (${uuid})..."

    systemctl disable "backup-libvirt-${frequency}@${instance}.timer"
    systemctl stop "backup-libvirt-${frequency}@${instance}.timer"

    logger -t backup-libvirt-timer "removed backup libvirt ${instance} (${uuid})."

    # remove folder
    rm -f "${target}"/*
    rmdir "${target}"
    rm -f "${line}"

  # add new instances
  elif test -f "$line/added"; then

    logger -t backup-libvirt-timer "creating backup libvirt ${instance} (${uuid})..."

    if test ! -f "$line/disabled.bin"; then

      systemctl enable "backup-libvirt-${frequency}@${instance}.timer"
      systemctl start "backup-libvirt-${frequency}@${instance}.timer"

    fi

    logger -t backup-libvirt-timer "created backup libvirt ${uuid}."

    rm -f "$line/added"

  # update instances
  elif test -f "$line/updated"; then

    logger -t backup-libvirt-timer "updating backup libvirt ${instance} (${uuid})..."

    cat /usr/libexec/device/timers/backup/libvirt/frequency.txt | \
    while read f; do

      if systemctl is-enabled "backup-libvirt-${f}@${instance}.timer"; then
        systemctl disable "backup-libvirt-${f}@${instance}.timer"
        systemctl stop "backup-libvirt-${f}@${instance}.timer"
      fi

    done

    if test ! -f "$line/disabled.bin"; then

      systemctl enable "backup-libvirt-${frequency}@${instance}.timer"
      systemctl reload-or-restart "backup-libvirt-${frequency}@${instance}.timer"

    fi

    logger -t backup-libvirt-timer "updated backup libvirt ${instance} (${uuid})."

    rm -f "$line/updated"

  fi

done


