#!/bin/bash

#
# Backup libvirt Timers
# =====================
#
# This script autogenerates the backup libvirt config.

set -e
umask 0027

exec 2> >(logger -t ${0})

#
# Handle the cleanup
# ------------------
cleanup_before_exit () {
  if [ -d "${tmpdir}" ]; then
    rm -rf "${tmpdir}"
  fi
}
# be in a temporay workspace (this works on linux and macosx)
tmpdir=`mktemp -d 2>/dev/null || mktemp -d -t 'tmpdir'`
# trap catches the exit signal and runs the specified function
trap cleanup_before_exit EXIT
# be in our directory
cd "${tmpdir}"


run_backup() {

request="${1}"
uuid="${2}"

#
# Run backup

if test "${request}" == "start" -o "${request}" == "reload" -o "${request}" == "restart"; then

  logger -t backup-libvirt@${uuid} "${request}ing backup libvirt..."

  install -m 700 -d /run/backup-libvirt

  line="/etc/device/timers/backup/libvirt/${uuid}"

  if test -f "$line/name.txt"; then
    fqdn="$(head -n 1 $line/name.txt)"
  fi

  if test -f "$line/local-owner.txt"; then
    localowner="$(head -n 1 $line/local-owner.txt)"
    target="$(getent passwd ${localowner} | cut -d ":" -f6)"
    localgroup="$(id -gn ${localowner})"
  fi



  ssh "root@${fqdn}" virsh list --all --name | \
  while read guest; do

    install -o "${localowner}" -d "${target}/${fqdn}/libvirt/"
    runuser -u "${localowner}" -- ssh "root@${fqdn}" virsh dumpxml "${guest}" | install -o "${localowner}" -g "${localgroup}" /dev/stdin "${target}/${fqdn}/libvirt/${guest}.xml"

  done

  logger -t backup-libvirt@${uuid} "${request}ed backup libvirt."

elif test "${request}" == "stop"; then

  logger -t backup-libvirt@${uuid} "${request}ed backup libvirt."

fi



}

#
# What to do?
# -----------

request="${1}"
uuid="${2}"

if test -n "${uuid}"; then
  run_backup "${1}" "${2}"
  exit 0
fi



#
# Add/remove backup

find /etc/device/timers/backup/libvirt/ -mindepth 1 -maxdepth 1 -type l | \
while read line; do

  target=$(readlink -f "$line")

  if test ! -f "$line/name.txt"; then
    continue;
  fi
  instance="$(head $line/name.txt)"
  uuid=$(basename $target)

  # remove old instances
  if test -f "$line/removed"; then

    logger -t backup-libvirt-timer "removing backup libvirt ${instance} (${uuid})..."

    systemctl disable "backup-libvirt@${uuid}"
    systemctl stop "backup-libvirt@${uuid}"

    logger -t backup-libvirt-timer "removed backup libvirt ${instance} (${uuid})."

    # remove folder
    rm -f "${target}"/*
    rmdir "${target}"
    rm -f "${line}"

  # add new instances
  elif test -f "$line/added"; then

    logger -t backup-libvirt-timer "creating backup libvirt ${instance} (${uuid})..."

    if test -f "$line/disabled.bin"; then

      systemctl disable "backup-libvirt@${uuid}"
      systemctl stop "backup-libvirt@${uuid}"

    else

      systemctl enable "backup-libvirt@${uuid}"
      systemctl start "backup-libvirt@${uuid}"

    fi

    logger -t backup-libvirt-timer "created backup libvirt ${uuid}."

    rm -f "$line/added"

  # update instances
  elif test -f "$line/updated"; then

    logger -t backup-libvirt-timer "updating backup libvirt ${uuid} (${uuid})..."

    if test -f "$line/disabled.bin"; then

      systemctl disable "backup-libvirt@${uuid}"
      systemctl stop "backup-libvirt@${uuid}"

    else

      systemctl enable "backup-libvirt@${uuid}"
      systemctl reload-or-restart "backup-libvirt@${uuid}"

    fi

    logger -t backup-libvirt-timer "updated backup libvirt ${instance} (${uuid})."

    rm -f "$line/updated"

  fi

done


