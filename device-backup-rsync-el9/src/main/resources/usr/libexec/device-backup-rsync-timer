#!/bin/bash -x

#
# Backup Rsync Timers
# ===================
#
# This script autogenerates the backup rsync config.

set -e
umask 0027


run_backup() {

request="${1}"
instance="${2}"

#
# Run backup

if test "${request}" == "start" -o "${request}" == "reload" -o "${request}" == "restart"; then

  systemd-notify --ready --status "Starting: ${request}ing backup rsync..."
  logger -t backup-rsync@${instance} "${request}ing backup rsync..."

  install -m 700 -d /run/backup-rsync

  line="/etc/device/timers/backup/rsync/${instance}"

  if test -f "$line/host.d/hostname.txt"; then
    fqdn="$(head -n 1 $line/host.d/hostname.txt)"
  else
    systemd-notify --status "Error: no hostname: backup rsync skipped."
    logger -t backup-rsync@${instance} "no hostname: backup rsync skipped."
    exit 1
  fi

  if test -f "$line/host.d/port.txt"; then
    port="$(head -n 1 $line/host.d/port.txt)"
  else
    port="22"
  fi

  if test -f "$line/host.d/remote-owner.txt"; then
    remoteowner="$(head -n 1 $line/host.d/remote-owner.txt)"
  else
    systemd-notify --status "Error: no remote owner: backup rsync skipped."
    logger -t backup-rsync@${instance} "no remote owner: backup rsync skipped."
    exit 1
  fi

  if test -f "$line/local-owner.txt"; then
    localowner="$(head -n 1 $line/local-owner.txt)"
    base="$(getent passwd ${localowner} | cut -d ":" -f6)"
    localgroup="$(id -gn ${localowner})"
  else
    systemd-notify --status "Error: no local owner: backup rsync skipped."
    logger -t backup-rsync@${instance} "no local owner: backup rsync skipped."
    exit 1
  fi

  if test -f "$line/source.txt"; then
    source="$(head -n 1 $line/source.txt)"
  else
    systemd-notify --status "Error: no source: backup rsync skipped."
    logger -t backup-rsync@${instance} "no source: backup rsync skipped."
    exit 1
  fi

  if test -f "$line/target.txt"; then
    target="$(head -n 1 $line/target.txt)"
  else
    systemd-notify --status "Error: no target: backup rsync skipped."
    logger -t backup-rsync@${instance} "no target: backup rsync skipped."
    exit 1
  fi

  if test -f "$line/frequency.txt"; then
    frequency="$(head -n 1 $line/frequency.txt)"
  else
    systemd-notify --status "Error: no frequency: backup rsync skipped."
    logger -t backup-rsync@${instance} "no frequency: backup rsync skipped."
    exit 1
  fi

  if test -f "$line/host.d/retain.txt"; then
    retain="$(head -n 1 $line/host.d/retain.txt)"
  else
    retain="7"
  fi

  # Note: jump box support is currently broken due to SELinux: https://issues.redhat.com/browse/RHEL-37655

  if test -f "$line/host.d/ssh-proxy.txt"; then
    sshproxy="-A -J $(head -n 1 $line/host.d/ssh-proxy.txt)"
  else
    sshproxy=""
  fi

  if test ! -f "$line/includes.txt"; then
    FILTER=""
  elif test 0 -ne $(grep -Ev "^#|^[[:space:]]*$" "$line/includes.txt" | wc -l); then
    FILTER="--include-from=$line/includes.txt --exclude=*"
  else
    FILTER=""
  fi

  # until further notice
  ret=0

  # prepare the initial path if it does not exist
  if test ! -e "${base}/${fqdn}"; then
    /usr/sbin/runuser -u "${localowner}" -- mkdir -p "${base}/${fqdn}"
  fi
  if test ! -e "${base}/${fqdn}/rsync"; then
    /usr/sbin/runuser -u "${localowner}" -- mkdir -p "${base}/${fqdn}/rsync"
  fi
  if test ! -e "${base}/${fqdn}/rsync/latest"; then
    /usr/sbin/runuser -u "${localowner}" -- mkdir -p "${base}/${fqdn}/rsync/latest"
  fi
  if test ! -e "${base}/${fqdn}/rsync/.progress"; then
    /usr/sbin/runuser -u "${localowner}" -- mkdir -p "${base}/${fqdn}/rsync/.progress"
  fi

  if test -e "${base}/${fqdn}/rsync/latest/${target}"; then
    created=$(stat --printf="%W" "${base}/${fqdn}/rsync/latest/${target}")
    archive=${base}/${fqdn}/rsync/$(date --date=@"${created}" "+%Y-%m-%d")/
  fi

  # set up ssh agent
  SSHAGENT="/usr/sbin/runuser -u ${localowner} -- /usr/bin/ssh-agent"
  SSHADD="/usr/sbin/runuser -m -u ${localowner} -- /usr/bin/ssh-add"
  eval `${SSHAGENT} -s`
  function cleanup {
    /bin/kill $SSH_AGENT_PID
  }
  trap cleanup EXIT
  ${SSHADD}

  # set up rsync
  CP="/usr/sbin/runuser -m -u ${localowner} -- /usr/bin/cp --update --one-file-system --strip-trailing-slashes --reflink=always"
  SSH="/usr/sbin/runuser -m -u ${localowner} -- /usr/bin/ssh ${sshproxy} -p ${port}"
  RSYNC="/usr/sbin/runuser -m -u ${localowner} -- /usr/bin/rsync"
  OPTIONS="-avz --no-specials --progress --delete-before --one-file-system --links --fake-super --chmod=D2750,F640"
  FIRST="--sparse --whole-file --partial --block-size=131072"
  NEXT="--inplace --partial --block-size=131072"
  RESUME="--append-verify --sparse --block-size=131072"

  if ${SSH} ${remoteowner}@${fqdn} test ! -e "${source}"; then

    systemd-notify --status "Error: target ${source} does not exist: backup rsync skipped."
    logger -t backup-rsync@${instance} "target ${source} does not exist: backup rsync skipped."
    exit 1

  fi

  # existing transfer in progress, previously interrupted?
  if test -e "${base}/${fqdn}/rsync/.progress/${target}"; then

    systemd-notify --status "Underway: previously interrupted copy on write...."
    logger -t backup-rsync@${instance} "Resume copy: ${CP} -a \"${base}/${fqdn}/rsync/latest/${target}\" \"${base}/${fqdn}/rsync/.progress/\""

    # existing transfer in progress - continue sync in place
    if test -e "${base}/${fqdn}/rsync/latest/${target}"; then
      ${CP} -a "${base}/${fqdn}/rsync/latest/${target}" "${base}/${fqdn}/rsync/.progress/"
    fi

    systemd-notify --status "Underway: previously interrupted rsync...."
    logger -t backup-rsync@${instance} "Resume transfer: ${RSYNC} -e \"/usr/bin/ssh ${sshproxy} -p ${port}\" ${OPTIONS} ${FILTER} ${RESUME} ${remoteowner}@${fqdn}:${source}/ ${base}/${fqdn}/rsync/.progress/${target}/"

    ${RSYNC} -e "/usr/bin/ssh ${sshproxy} -p ${port}" ${OPTIONS} ${FILTER} ${RESUME} ${remoteowner}@${fqdn}:${source} ${base}/${fqdn}/rsync/.progress/${target} || ret=$?

  # existing data, but new transfer starting?
  elif test -e "${base}/${fqdn}/rsync/latest/${target}" -a ! -e "${base}/${fqdn}/rsync/.progress/${target}"; then

    systemd-notify --status "Underway: earlier backup copy on write...."
    logger -t backup-rsync@${instance} "Update transfer: ${CP} -a \"${base}/${fqdn}/rsync/latest/${target}\" \"${base}/${fqdn}/rsync/.progress/\""

    # existing data - make a copy and then sync in place
    if test -e "${base}/${fqdn}/rsync/latest/${target}"; then
      ${CP} -a "${base}/${fqdn}/rsync/latest/${target}" "${base}/${fqdn}/rsync/.progress/"
    fi

    systemd-notify --status "Underway: earlier backup rsync...."
    logger -t backup-rsync@${instance} "Update transfer: ${RSYNC} -e \"/usr/bin/ssh ${sshproxy} -p ${port}\" ${OPTIONS} ${FILTER} ${NEXT} ${remoteowner}@${fqdn}:${source} ${base}/${fqdn}/rsync/.progress/${target}"

    ${RSYNC} -e "/usr/bin/ssh ${sshproxy} -p ${port}" ${OPTIONS} ${FILTER} ${NEXT} ${remoteowner}@${fqdn}:${source} ${base}/${fqdn}/rsync/.progress/${target} || ret=$?

  # no existing data, no transfer in progress, copy sparse from scratch
  else

    systemd-notify --status "Underway: initial backup rsync...."
    logger -t backup-rsync@${instance} "Inital transfer: ${RSYNC} -e \"/usr/bin/ssh ${sshproxy} -p ${port}\" ${OPTIONS} ${FILTER} ${FIRST} ${remoteowner}@${fqdn}:${source} ${base}/${fqdn}/rsync/.progress/${target}"

    # first time copy - user whole file
    ${RSYNC} -e "/usr/bin/ssh ${sshproxy} -p ${port}" ${OPTIONS} ${FILTER} ${FIRST} ${remoteowner}@${fqdn}:${source} ${base}/${fqdn}/rsync/.progress/${target} || ret=$?

  fi

  if test "${ret}" != 24 -a "${ret}" != 0; then
    systemd-notify --status "Error: rsync failed with code ${ret}."
    logger -t backup-rsync@${instance} "Error: rsync failed with code ${ret}"
    exit ${ret}
  fi

  # make sure we stay sparse
  if test -f "$line/sparse.bin"; then
    find "${base}/${fqdn}/rsync/.progress/${target}" -type f -print0 | xargs --no-run-if-empty --null -L1 fallocate -d
  fi

  # save history? only do this once per period
  if test -z "${archive}" -o -d "${archive}/${target}"; then
    # no history for now
    if test -e "${base}/${fqdn}/rsync/latest/${target}";then
      mv --backup=numbered "${base}/${fqdn}/rsync/latest/${target}" ${base}/${fqdn}/rsync/.remove
    fi
    mv "${base}/${fqdn}/rsync/.progress/${target}" "${base}/${fqdn}/rsync/latest/${target}"
    rm -rf "${base}/${fqdn}/rsync/.remove" || rmdir "${base}/${fqdn}/rsync/.remove" || true
  else
    /usr/sbin/runuser -u "${localowner}" -- mkdir -p "${archive}"
    if test -e "${base}/${fqdn}/rsync/latest/${target}"; then
      mv "${base}/${fqdn}/rsync/latest/${target}" "${archive}/${target}"
    fi
    mv "${base}/${fqdn}/rsync/.progress/${target}" "${base}/${fqdn}/rsync/latest/${target}"
  fi

  # mark the remote as backed up
  ${SSH} ${PROXY} ${remoteowner}@${fqdn} 'if test -d "${source}"; then touch "${source}/.last-backup" || true; fi'

  # clean up the archive
  find "${base}/${fqdn}/rsync/" -mindepth 1 -maxdepth 1 -type d -name "*-*-*" | sort -r | tail -n +$((${retain}+1)) | xargs -L1 rm -rf

  systemd-notify --status "Complete: finished ${request}ing backup rsync."
  logger -t backup-rsync@${instance} "${request}ed backup rsync."

elif test "${request}" == "stop"; then

  logger -t backup-rsync@${instance} "stopped backup rsync."

fi



}

#
# What to do?
# -----------

request="${1}"
instance="${2}"

if test -n "${instance}"; then
  run_backup "${1}" "${2}"
  exit 0
fi



#
# Add/remove backup

find /etc/device/timers/backup/rsync/ -mindepth 1 -maxdepth 1 -type l | \
while read line; do

  target=$(readlink -f "$line")

  if test ! -f "$line/name.txt"; then
    continue;
  fi
  instance="$(head $line/name.txt)"
  uuid=$(basename $target)

  if test ! -f "$line/frequency.txt"; then
    continue;
  fi
  frequency="$(head $line/frequency.txt)"

  # remove old instances
  if test -f "$line/removed"; then

    logger -t backup-rsync-timer "removing backup rsync ${instance} (${uuid})..."

    systemctl disable "backup-rsync@${instance}.service"
    systemctl stop "backup-rsync@${instance}.service"

    systemctl disable "backup-rsync-${frequency}@${instance}.timer"
    systemctl stop "backup-rsync-${frequency}@${instance}.timer"

    logger -t backup-rsync-timer "removed backup rsync ${instance} (${uuid})."

    # remove folder
    rm -f "${target}"/*
    rmdir "${target}"
    rm -f "${line}"

  # add new instances
  elif test -f "$line/added"; then

    logger -t backup-rsync-timer "creating backup rsync ${instance} (${uuid})..."

    if test ! -f "$line/disabled.bin"; then

      systemctl enable "backup-rsync-${frequency}@${instance}.timer"
      systemctl start "backup-rsync-${frequency}@${instance}.timer"

    fi

    logger -t backup-rsync-timer "created backup rsync ${uuid}."

    rm -f "$line/added"

  # update instances
  elif test -f "$line/updated"; then

    logger -t backup-rsync-timer "updating backup rsync ${instance} (${uuid})..."

    cat /usr/libexec/device/timers/backup/rsync/frequency.txt | \
    while read f; do

      if systemctl is-enabled "backup-rsync-${f}@${instance}.timer"; then
        systemctl disable "backup-rsync-${f}@${instance}.timer"
        systemctl stop "backup-rsync-${f}@${instance}.timer"
      fi

    done

    if test ! -f "$line/disabled.bin"; then

      systemctl enable "backup-rsync-${frequency}@${instance}.timer"
      systemctl reload-or-restart "backup-rsync-${frequency}@${instance}.timer"

    fi

    logger -t backup-rsync-timer "updated backup rsync ${instance} (${uuid})."

    rm -f "$line/updated"

  fi

done


